// Generated by CoffeeScript 1.10.0
(function() {
  var Fs, Http, Mime, Url, resultRegister, results, routerHandler, routerMatch, routerRegister, routes, rules,
    slice = [].slice;

  Http = require('http');

  Fs = require('fs');

  Mime = require('mime');

  Url = require('url');

  results = {};

  routes = {};

  rules = {};

  resultRegister = function(name, fn) {
    return results[name] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function(req, res, params) {
        return fn.apply({
          req: req,
          res: res,
          params: params
        }, args);
      };
    };
  };

  resultRegister('file', function(file) {
    return Fs.access(file, Fs.R_OK, (function(_this) {
      return function(err) {
        var mime, stream;
        if (err != null) {
          _this.res.writeHead(404, 'Content-Type: text/html; charset=utf-8');
          return _this.res.end('File not found.');
        }
        mime = Mime.lookup(file);
        _this.res.writeHead(200, 'Content-Type: ' + mime + '; charset=utf-8');
        stream = Fs.createReadStream(file);
        return stream.pipe(_this.res);
      };
    })(this));
  });

  resultRegister('notFound', function() {
    this.res.writeHead(404, 'Content-Type: text/html; charset=utf-8');
    return this.res.end('File not found.');
  });

  resultRegister('json', function(data) {
    this.res.writeHead(200, 'Content-Type: application/json; charset=utf-8');
    return this.res.end(JSON.stringify(data));
  });

  resultRegister('content', function(content, type) {
    if (type == null) {
      type = 'text/html';
    }
    this.res.writeHead(200, 'Content-Type: ' + type + '; charset=utf-8');
    return this.res.end(content);
  });

  routerMatch = function(method, pattern) {
    var currentRules, keys, parts, r;
    keys = [];
    currentRules = [];
    parts = pattern.split(' ');
    if (parts.length > 1) {
      currentRules = parts[0].split(';');
      pattern = parts[1];
    }
    pattern = pattern.replace(/(:|%)([_a-z0-9-]+)/i, function(m, prefix, name) {
      keys.push(name);
      if (prefix === ':') {
        return '([^\\/]+)';
      } else {
        return '(.+)';
      }
    });
    r = new RegExp("^" + pattern + "$", 'g');
    return [
      currentRules, function(requestMethod, uri, params) {
        var i, j, len, result, val;
        if ((method != null) && requestMethod !== method) {
          return false;
        }
        result = r.exec(uri);
        r.lastIndex = 0;
        if (result != null) {
          for (i = j = 0, len = result.length; j < len; i = ++j) {
            val = result[i];
            if (i === 0) {
              continue;
            }
            params[keys[i - 1]] = val;
          }
          return true;
        }
        return false;
      }
    ];
  };

  routerRegister = function(method, pattern, fn) {
    var currentRules, ref, tester;
    ref = routerMatch(method, pattern), currentRules = ref[0], tester = ref[1];
    return routes[pattern] = [tester, currentRules, fn];
  };

  routerHandler = function(req, res) {
    var currentRules, def, fn, j, len, params, parts, pattern, result, rule, tester, uri;
    parts = Url.parse(req.url, true);
    uri = parts.pathname != null ? parts.pathname : '/';
    params = parts.query;
    result = null;
    for (pattern in routes) {
      def = routes[pattern];
      tester = def[0], currentRules = def[1], fn = def[2];
      if (!tester(req.method, uri, params)) {
        continue;
      }
      for (j = 0, len = currentRules.length; j < len; j++) {
        rule = currentRules[j];
        if (rules[rule] != null) {
          result = rules[rule].call(results, params);
        }
        if (result instanceof Function) {
          break;
        }
      }
      if (!(result instanceof Function)) {
        result = fn.call(results, params);
      }
      break;
    }
    if (result == null) {
      result = results.notFound();
    }
    return result.call(null, req, res, params);
  };

  module.exports = {
    rule: function(name, fn) {
      return rules[name] = fn;
    },
    result: resultRegister,
    start: function(port, host) {
      var http;
      if (port == null) {
        port = 80;
      }
      if (host == null) {
        host = 'localhost';
      }
      http = Http.createServer(routerHandler);
      return http.listen(port, host);
    },
    on: function(pattern, fn, method) {
      if (method == null) {
        method = null;
      }
      return routerRegister(method, pattern, fn);
    },
    get: function(pattern, fn) {
      return routerRegister('get', pattern, fn);
    },
    post: function(pattern, fn) {
      return routerRegister('post', pattern, fn);
    },
    assets: function(path, dir) {
      return routerRegister('get', (path.replace(/\/+$/g, '')) + '/%path', function(params) {
        return this.file(dir + '/' + (params.path.replace(/\.{2,}/g, '')));
      });
    }
  };

}).call(this);
