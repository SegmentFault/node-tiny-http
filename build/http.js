// Generated by CoffeeScript 2.3.2
(function() {
  var Http, HttpServer, Result, Router, Url;

  HttpServer = require('http');

  Url = require('url');

  Result = require('./result');

  Router = require('./router');

  Http = class Http {
    constructor() {
      this.resultInstance = new Result;
      this.routerInstance = new Router;
    }

    // listen port
    listen(options) {
      var http;
      http = HttpServer.createServer(this.routerInstance.handler(this.resultInstance.result, options));
      if (options.sock != null) {
        return http.listen(options.sock);
      } else {
        options.port = options.port || 8888;
        options.host = options.host || 'localhost';
        return http.listen(options.port, options.host);
      }
    }

    // register result
    result(...args) {
      return this.resultInstance.register.apply(this.resultInstance, args);
    }

    // use default interceptor
    use(...args) {
      return this.routerInstance.use.apply(this.routerInstance, args);
    }

    
    // on method
    on(pattern, fn, method = null) {
      return this.routerInstance.register(method, pattern, fn);
    }

    
    // get method
    get(pattern, fn) {
      return this.routerInstance.register('GET', pattern, fn);
    }

    
    // post method
    post(pattern, fn) {
      return this.routerInstance.register('POST', pattern, fn);
    }

    
    // static file method
    assets(path, dir) {
      return this.routerInstance.register('GET', (path.replace(/\/+$/g, '')) + '/%path', function(done) {
        var i, len, parts, ref, val;
        parts = [];
        path = this.request.get('path');
        ref = path.split('/');
        for (i = 0, len = ref.length; i < len; i++) {
          val = ref[i];
          if (!val.match(/^\.+$/)) {
            parts.push(val);
          }
        }
        return done('file', dir + '/' + (parts.join('/')));
      }).raw();
    }

  };

  module.exports = Http;

}).call(this);
