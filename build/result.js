// Generated by CoffeeScript 1.12.2
(function() {
  var Fs, Mime, Result,
    slice = [].slice;

  Fs = require('fs');

  Mime = require('mime');

  Result = (function() {
    function Result() {
      this.result = {};
      this.register('file', function(file, mime) {
        if (mime == null) {
          mime = null;
        }
        this.response.responded = true;
        return Fs.access(file, Fs.R_OK, (function(_this) {
          return function(err) {
            var stream;
            if (err != null) {
              return _this.response.status(404).content('File not found.').respond();
            }
            if (mime == null) {
              mime = Mime.lookup(file);
            }
            stream = Fs.createReadStream(file);
            return _this.response.header('content-type', mime + '; charset=utf-8').content(stream).respond();
          };
        })(this));
      });
      this.register('blank', function() {
        return this.response.content('');
      });
      this.register('redirect', function(url, permanently) {
        if (permanently == null) {
          permanently = false;
        }
        return this.response.status(permanently ? 301 : 302).header('location', url);
      });
      this.register('back', function() {
        var url;
        url = this.request.header('referer', '/');
        return this.response.status(302).header('location', url);
      });
      this.register('notFound', function() {
        return this.response.status(404).content('File not found.');
      });
      this.register('json', function(data) {
        return this.response.header('content-type', 'application/json; charset=utf-8').content(JSON.stringify(data));
      });
      this.register('content', function(content, type) {
        if (type == null) {
          type = 'text/html';
        }
        return this.response.header('content-type', type + '; charset=utf-8').content(content);
      });
    }

    Result.prototype.register = function(name, fn) {
      return this.result[name] = function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return function(request, response) {
          return fn.apply({
            request: request,
            response: response
          }, args);
        };
      };
    };

    return Result;

  })();

  module.exports = Result;

}).call(this);
