// Generated by CoffeeScript 1.10.0
(function() {
  var Fs, Mime, register, results,
    slice = [].slice;

  Fs = require('fs');

  Mime = require('mime');

  results = {};

  register = function(name, fn) {
    return results[name] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return function(req, res) {
        return fn.apply({
          req: req,
          res: res
        }, args);
      };
    };
  };

  register('file', function(file) {
    return Fs.access(file, Fs.R_OK, (function(_this) {
      return function(err) {
        var mime, stream;
        if (err != null) {
          _this.res.writeHead(404, 'Content-Type: text/html; charset=utf-8');
          return _this.res.end('File not found.');
        }
        mime = Mime.lookup(file);
        _this.res.writeHead(200, 'Content-Type: ' + mime + '; charset=utf-8');
        stream = Fs.createReadStream(file);
        return stream.pipe(_this.res);
      };
    })(this));
  });

  register('notFound', function() {
    this.res.writeHead(404, 'Content-Type: text/html; charset=utf-8');
    return this.res.end('File not found.');
  });

  register('json', function(data) {
    this.res.writeHead(200, 'Content-Type: application/json; charset=utf-8');
    return this.res.end(JSON.stringify(data));
  });

  register('content', function(content, type) {
    if (type == null) {
      type = 'text/html';
    }
    this.res.writeHead(200, 'Content-Type: ' + type + '; charset=utf-8');
    return this.res.end(content);
  });

  module.exports = {
    results: results,
    register: register
  };

}).call(this);
