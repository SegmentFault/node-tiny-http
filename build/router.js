// Generated by CoffeeScript 1.10.0
(function() {
  var Request, Response, Result, defaults, handler, match, register, routes, use,
    slice = [].slice;

  Request = require('./request');

  Response = require('./response');

  Result = require('./result');

  routes = {};

  defaults = [];

  match = function(method, pattern) {
    var keys, r;
    keys = [];
    pattern = pattern.replace(/(:|%)([_a-z0-9-]+)/i, function(m, prefix, name) {
      keys.push(name);
      if (prefix === ':') {
        return '([^\\/]+)';
      } else {
        return '(.+)';
      }
    });
    r = new RegExp("^" + pattern + "$", 'g');
    return function(requestMethod, uri, params) {
      var i, j, len, result, val;
      if ((method != null) && requestMethod !== method) {
        return false;
      }
      result = r.exec(uri);
      r.lastIndex = 0;
      if (result != null) {
        for (i = j = 0, len = result.length; j < len; i = ++j) {
          val = result[i];
          if (i === 0) {
            continue;
          }
          params[keys[i - 1]] = val;
        }
        return true;
      }
      return false;
    };
  };

  register = function(method, pattern, fn) {
    var functions, pushed, tester;
    tester = match(method, pattern);
    functions = [];
    pushed = false;
    return routes[pattern] = {
      get: function() {
        if (!pushed) {
          functions.push(fn);
          pushed = true;
        }
        return [tester, functions];
      },
      use: function() {
        var action, actions, item, j, len, results;
        actions = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        results = [];
        for (j = 0, len = actions.length; j < len; j++) {
          action = actions[j];
          if (action instanceof Array) {
            results.push((function() {
              var k, len1, results1;
              results1 = [];
              for (k = 0, len1 = action.length; k < len1; k++) {
                item = action[k];
                results1.push(functions.push(item));
              }
              return results1;
            })());
          } else {
            results.push(functions.push(action));
          }
        }
        return results;
      }
    };
  };

  use = function() {
    var action, actions, item, j, len, results;
    actions = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    results = [];
    for (j = 0, len = actions.length; j < len; j++) {
      action = actions[j];
      if (action instanceof Array) {
        results.push((function() {
          var k, len1, results1;
          results1 = [];
          for (k = 0, len1 = action.length; k < len1; k++) {
            item = action[k];
            results1.push(defaults.push(item));
          }
          return results1;
        })());
      } else {
        results.push(defaults.push(action));
      }
    }
    return results;
  };

  handler = function(result, options) {
    return function(req, res) {
      var response;
      response = new Response(res, options);
      return new Request(req, options, function(request) {
        var callbacks, context, def, done, functions, index, next, params, pattern, ref, resultArgs, returned, tester;
        context = {
          request: request,
          response: response
        };
        callbacks = [];
        returned = false;
        index = -1;
        resultArgs = null;
        next = null;
        done = function() {
          var args, name;
          name = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          if (returned) {
            return;
          }
          returned = true;
          index = callbacks.length;
          if (result[name] == null) {
            name = 'blank';
          }
          resultArgs = [name, args];
          return next();
        };
        for (pattern in routes) {
          def = routes[pattern];
          ref = def.get(), tester = ref[0], functions = ref[1];
          params = {};
          if (!tester(request.method, request.path, params)) {
            continue;
          }
          request.set(params);
          (next = function(callback) {
            var args, fn, name;
            if (returned) {
              index -= 1;
              if (index >= 0) {
                return callbacks[index].apply(context, resultArgs);
              } else {
                name = resultArgs[0], args = resultArgs[1];
                result[name].apply(null, args).call(null, request, response);
                if (!response.responded) {
                  return response.respond();
                }
              }
            } else {
              if (callback != null) {
                callbacks.push(callback);
              }
              index += 1;
              fn = index >= defaults.length ? functions[index - defaults.length] : defaults[index];
              if (fn != null) {
                return fn.call(context, done, next);
              }
            }
          })(null);
          return;
        }
        return done('notFound');
      });
    };
  };

  module.exports = {
    register: register,
    handler: handler,
    use: use
  };

}).call(this);
