// Generated by CoffeeScript 1.10.0
(function() {
  var Request, Result, findRule, handler, match, register, registerRule, routes, rules,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Request = require('./request');

  Result = require('./result');

  routes = {};

  rules = {};

  findRule = function(name) {
    var currentRules, depends, fn, found, item, j, k, len, len1, n, ref;
    currentRules = [];
    if (rules[name] != null) {
      ref = rules[name], fn = ref[0], depends = ref[1];
      if (depends != null) {
        for (j = 0, len = depends.length; j < len; j++) {
          n = depends[j];
          found = ruleFind(n);
          for (k = 0, len1 = found.length; k < len1; k++) {
            item = found[k];
            if (indexOf.call(currentRules, item) < 0) {
              currentRules.push(item);
            }
          }
        }
      }
      currentRules.push(rules[name]);
    }
    return currentRules;
  };

  match = function(method, pattern) {
    var currentRuleFunctions, currentRules, found, item, j, k, keys, len, len1, name, parts, r;
    keys = [];
    currentRules = [];
    currentRuleFunctions = [];
    parts = pattern.split(' ');
    if (parts.length > 1) {
      currentRules = parts[0].split(';');
      pattern = parts[1];
    }
    for (j = 0, len = currentRules.length; j < len; j++) {
      name = currentRules[j];
      found = findRule(name);
      for (k = 0, len1 = found.length; k < len1; k++) {
        item = found[k];
        if (indexOf.call(currentRuleFunctions, item) < 0) {
          currentRuleFunctions.push(item);
        }
      }
    }
    pattern = pattern.replace(/(:|%)([_a-z0-9-]+)/i, function(m, prefix, name) {
      keys.push(name);
      if (prefix === ':') {
        return '([^\\/]+)';
      } else {
        return '(.+)';
      }
    });
    r = new RegExp("^" + pattern + "$", 'g');
    return [
      currentRuleFunctions, function(requestMethod, uri, params) {
        var i, l, len2, result, val;
        if ((method != null) && requestMethod !== method) {
          return false;
        }
        result = r.exec(uri);
        r.lastIndex = 0;
        if (result != null) {
          for (i = l = 0, len2 = result.length; l < len2; i = ++l) {
            val = result[i];
            if (i === 0) {
              continue;
            }
            params[keys[i - 1]] = val;
          }
          return true;
        }
        return false;
      }
    ];
  };

  registerRule = function(name, fn, depends) {
    if (depends == null) {
      depends = null;
    }
    if ((depends != null) && !(depends instanceof Array)) {
      depends = depends.split(';');
    }
    return rules[name] = [fn, depends];
  };

  register = function(method, pattern, fn) {
    var currentRules, ref, tester;
    ref = match(method, pattern), currentRules = ref[0], tester = ref[1];
    return routes[pattern] = [tester, currentRules, fn];
  };

  handler = function(results) {
    return function(req, res) {
      return new Request(req, function(request) {
        var currentRules, def, fn, j, len, params, pattern, result, rule, tester;
        result = null;
        params = {};
        for (pattern in routes) {
          def = routes[pattern];
          tester = def[0], currentRules = def[1], fn = def[2];
          if (!tester(request.method, request.path, params)) {
            continue;
          }
          request.set(params);
          for (j = 0, len = currentRules.length; j < len; j++) {
            rule = currentRules[j];
            if (rules[rule] != null) {
              result = rule.call(results, request);
            }
            if (result instanceof Function) {
              break;
            }
          }
          if (!(result instanceof Function)) {
            result = fn.call(results, request);
          }
          break;
        }
        if (result == null) {
          result = results.notFound();
        }
        return result.call(null, request, res);
      });
    };
  };

  module.exports = {
    register: register,
    registerRule: registerRule,
    handler: handler
  };

}).call(this);
